backend
---------
1)create server folder bankapp-backend
2)create package.json using- npm init
3)install express- npm install express
4)create index.js file
5)using express create server application- const server=require('express')
6)setup port number- server.listen(5000,()=>{})
7)install cors- npm i cors
cors- cross origin resource sharing
      is an HTTP-header based mechanism implemented by the browser which allows a server 
      or an API(Application Programming Interface) to indicate any origins (different in terms
       of protocol, hostname, or port) other than its origin from which the unknown origin gets
        permission to access and load resources. The cors package available in the npm registry 
        is used to tackle CORS errors in a Node.js application.
9) Use cors in server application
10) Resolve the API Requests


JWT Token
............
JWT refers to JSON Web token. It’s a token in string form validated and generated by a web server. 
This string-based token helps in communicating between the client and the server.

installation-npm i jsonwebtoken
*Generate token-sign()
*Generate token for user who loggined successfull
*Import jwt token in logic.js file

Middleware
...........
Middleware Node.JS is a function that plays a vital role in the request-response
lifecycle of Node.JS execution. Using middleware functions, you can run any code
and easily change response and request objects.


What is the Next ( ) Function?
The next ( ) function plays a vital role in applications'
 request and response cycle. It is a middleware function that 
 runs the next middleware function once it is invoked. In other words,
the Next function is invoked if the current middleware function doesn’t end
the request and response cycle. It is essential to note that no middleware function 
should be hanging in the queue

Types of middleware
.....................
->Application specific middleware
.....................................
 application-level middleware focuses on authenticating users.
  Once the authentication request is received, the authentication middleware 
  invokes authentication code logic.

If the authentication is successful, the rest of the route 
is progressed with the help of the next function. On the other 
hand, if the authentication is unsuccessful, there is no progress 
in the route, and the middleware releases error messages.

->Router-level Middleware
...........................
This middleware works in the same way application-level middleware works. 
By using the express. router ( ) function, this middleware supports creating 
and managing instances. Moreover, you can load router-level middleware with the 
help of the router.use ( ) function as well as router.METHOD ( ) function.


What is Node.JS?
Node.JS is an open-source as well as JavaScript runtime environment. 
As it supports cross-platform, you can run Node.JS anywhere, whether it is Windows, 
Linux, or macOS. Node.JS is a platform that runs on the JavaScript engine.

By using Node.JS, you can build dynamic page content. Also, you can open, close, read, write,
modify, create and delete files on the server.

Node.JS uses a single-threaded model, but at the same time, they are highly scalable. 
What’s more! They don't buffer any data, but they release data in chunks.

